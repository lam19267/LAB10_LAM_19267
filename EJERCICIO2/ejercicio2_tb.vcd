$date
	Sat Nov 07 22:06:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 1 ! Ze $end
$var wire 4 " YF [3:0] $end
$var wire 1 # C $end
$var reg 4 $ A [3:0] $end
$var reg 3 % R [2:0] $end
$var reg 1 & clk $end
$var reg 1 ' enable $end
$var reg 1 ( enable1 $end
$var reg 1 ) enable2 $end
$var reg 1 * reset $end
$scope module C4 $end
$var wire 4 + A [3:0] $end
$var wire 3 , R [2:0] $end
$var wire 1 & clk $end
$var wire 1 ' enable $end
$var wire 1 ( enable1 $end
$var wire 1 ) enable2 $end
$var wire 1 * reset $end
$var wire 1 ! Ze $end
$var wire 4 - YF [3:0] $end
$var wire 4 . Y2 [3:0] $end
$var wire 4 / Y1 [3:0] $end
$var wire 5 0 Y [4:0] $end
$var wire 4 1 Q [3:0] $end
$var wire 1 # C $end
$scope module U1 $end
$var wire 4 2 A [3:0] $end
$var wire 1 ' enable $end
$var wire 4 3 Y [3:0] $end
$upscope $end
$scope module U2 $end
$var wire 1 & clk $end
$var wire 1 ( enable $end
$var wire 1 * reset $end
$var wire 4 4 A [3:0] $end
$var reg 4 5 Y [3:0] $end
$upscope $end
$scope module U3 $end
$var wire 4 6 A [3:0] $end
$var wire 4 7 B [3:0] $end
$var wire 3 8 R [2:0] $end
$var reg 1 # C $end
$var reg 4 9 Q [3:0] $end
$var reg 5 : Y [4:0] $end
$var reg 1 ! Ze $end
$upscope $end
$scope module U4 $end
$var wire 4 ; A [3:0] $end
$var wire 1 ) enable $end
$var wire 4 < Y [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz <
bz ;
b0zzzz :
bz 9
b0 8
bx 7
bz 6
bx 5
bz 4
bz 3
b0 2
bz 1
b0zzzz 0
bz /
bx .
bz -
b0 ,
b0 +
0*
0)
0(
0'
0&
b0 %
b0 $
0#
bz "
0!
$end
#1
b0zzzz 0
b0zzzz :
b0 .
b0 5
b0 7
1*
#2
b1 "
b1 -
b1 <
b1 1
b1 4
b1 9
b1 ;
b1 0
b1 :
b1 /
b1 3
b1 6
b1 %
b1 ,
b1 8
b1 $
b1 +
b1 2
1)
1(
1'
0*
#3
b0 "
b0 -
b0 <
b0 1
b0 4
b0 9
b0 ;
b0 0
b0 :
b10 /
b10 3
b10 6
b10 %
b10 ,
b10 8
b10 $
b10 +
b10 2
#4
b11 "
b11 -
b11 <
b11 1
b11 4
b11 9
b11 ;
b11 0
b11 :
b11 /
b11 3
b11 6
b11 %
b11 ,
b11 8
b11 $
b11 +
b11 2
#5
b1111 .
b1111 5
b1111 7
1&
b1011 "
b1011 -
b1011 <
b1011 1
b1011 4
b1011 9
b1011 ;
b11011 0
b11011 :
b100 /
b100 3
b100 6
b100 %
b100 ,
b100 8
b100 $
b100 +
b100 2
#6
b101 "
b101 -
b101 <
b101 1
b101 4
b101 9
b101 ;
b101 0
b101 :
b101 /
b101 3
b101 6
b0 %
b0 ,
b0 8
b101 $
b101 +
b101 2
#7
b111 "
b111 -
b111 <
b111 1
b111 4
b111 9
b111 ;
1#
b10111 0
b10111 :
b110 /
b110 3
b110 6
b1 %
b1 ,
b1 8
b110 $
b110 +
b110 2
#8
b1111 "
b1111 -
b1111 <
b1111 1
b1111 4
b1111 9
b1111 ;
0#
b1111 0
b1111 :
b111 /
b111 3
b111 6
b10 %
b10 ,
b10 8
b111 $
b111 +
b111 2
#9
b111 "
b111 -
b111 <
b111 1
b111 4
b111 9
b111 ;
1#
b10111 0
b10111 :
b1000 /
b1000 3
b1000 6
b11 %
b11 ,
b11 8
b1000 $
b1000 +
b1000 2
#10
0&
b110 "
b110 -
b110 <
b110 1
b110 4
b110 9
b110 ;
0#
b10110 0
b10110 :
b1001 /
b1001 3
b1001 6
b100 %
b100 ,
b100 8
b1001 $
b1001 +
b1001 2
#11
b1010 "
b1010 -
b1010 <
b1010 1
b1010 4
b1010 9
b1010 ;
b1010 0
b1010 :
b1010 /
b1010 3
b1010 6
b0 %
b0 ,
b0 8
b1010 $
b1010 +
b1010 2
#12
b1100 "
b1100 -
b1100 <
b1100 1
b1100 4
b1100 9
b1100 ;
1#
b11100 0
b11100 :
b1011 /
b1011 3
b1011 6
b1 %
b1 ,
b1 8
b1011 $
b1011 +
b1011 2
#13
b1111 "
b1111 -
b1111 <
b1111 1
b1111 4
b1111 9
b1111 ;
0#
b1111 0
b1111 :
b1100 /
b1100 3
b1100 6
b10 %
b10 ,
b10 8
b1100 $
b1100 +
b1100 2
#14
b1100 "
b1100 -
b1100 <
b1100 1
b1100 4
b1100 9
b1100 ;
1#
b11100 0
b11100 :
b1101 /
b1101 3
b1101 6
b11 %
b11 ,
b11 8
b1101 $
b1101 +
b1101 2
#15
b1 .
b1 5
b1 7
1&
b1111 "
b1111 -
b1111 <
b1111 1
b1111 4
b1111 9
b1111 ;
0#
b11111 0
b11111 :
b1110 /
b1110 3
b1110 6
b100 %
b100 ,
b100 8
b1110 $
b1110 +
b1110 2
#16
b1111 0
b1111 :
b1111 /
b1111 3
b1111 6
b0 %
b0 ,
b0 8
b1111 $
b1111 +
b1111 2
#20
0&
#25
b1111 0
b1111 :
b1111 .
b1111 5
b1111 7
1&
#30
0&
#35
1&
#40
0&
#45
1&
#50
0&
